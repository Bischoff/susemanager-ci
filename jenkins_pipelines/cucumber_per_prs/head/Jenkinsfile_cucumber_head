#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '600', daysToKeepStr: '7')),
    disableConcurrentBuilds(),
])

pipeline {
  environment { 

  // +++++++
  // ADAPT: these variables need adaptation for branch, here is specific for HEAD branch
  // +++++++
  // * jenkins or pipeline or deploy specific
     ctl_node = 'suma-prshead-ctl.mgr.suse.de'
     maintf = 'head-prs.tf'
     obs_from_github = 'Devel:Galaxy:Manager:Head:Pr-Automation'
     branch = "Manager"

  // -----
  // DONT MODIFY this variables ( they will be stay fixed)
  // -----
     context = "cucumber_${branch}"
     scripts = "${env.WORKSPACE}/jenkins_pipelines/cucumber_per_prs/common_scripts"
     ssh_flags = '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
     exec_tests = 'run-testsuite'
     repository = "SUSE/spacewalk"
     description = "cucumber tests for ${branch} branch"
     git_fs = "${env.WORKSPACE}"
     check = "gitarro.ruby2.1  -r ${repository}" + 
                " -c \"${context}\" -d \"${description}\" " +
                " -t ${test_build_rpm} " +
                " -g ${git_fs} " +
                " -b \"${branch}\" " +
                "--check" 
     context_build = "build rpms from github branch: ${branch}"
     description_build = "build rpms from github spec"
     test_build_rpm = "${scripts}/build_and_check_rpms.sh '${obs_from_github}' '${env.WORKSPACE}' "

     // we have 2 gitarro github tests: 1) rpms are all successefull builded, 2) cucumber tests.
     build_rpm_from_github_with_gitarro = "gitarro.ruby2.1  -r ${repository}" + 
                " -c \"${context_build}\" -d \"${description_build}\" " +
                " -g ${git_fs} " +
                " -u \"${env.BUILD_URL}\" " +
                " -b \"${branch}\" " +
                " -t \"${test_build_rpm}\" " 
     run_cucumber_with_gitarro = "${scripts}/run_cucumber.sh '${repository}' '${context}' '${description}' '${git_fs}' '${env.BUILD_URL}' " +
                                 "'${branch}' '${ctl_node}' '${env.WORKSPACE}' '${ssh_flags}'"

     sumaform_runner_url = 'https://gitlab.suse.de/galaxy/sumaform-test-runner'
     sumaform_url = 'https://github.com/moio/sumaform.git'
    }

    agent {label 'sumaform-cucumber' }
    // triggers { cron('H/10 * * * *') }
    stages {
    stage('Obs github repository has all rpms published: wait and check for no failures') {
        steps {
                  sh "ruby ${scripts}/check_pkgs_published.rb ${obs_from_github}"
                  sh "${scripts}/check_failure_rpm_pkg.sh '${obs_from_github}'"     
              }
     }

    stage('Check untested Pull Request') {
        steps { 
                  sh "${check} | grep \"TESTREQUIRED=true\" "
              }
     }

    stage('Build new spacewalk rpms from github specs Pull-Request') {
          steps { 
                  sh "${build_rpm_from_github_with_gitarro}"
                }

      }
 
    stage('Deploy cucumber VMs with rpms from github') {
            steps {
                dir('prod') {
                    git url: sumaform_runner_url
                }
                dir('prod/cucumber-on-prs/sumaform') {
                    git url: sumaform_url
                }
                sh "mv prod/cucumber-on-prs/${maintf} prod/cucumber-on-prs/sumaform"

                dir('prod/cucumber-on-prs/sumaform') {
                    sh "${scripts}/change_controlnode.sh '${maintf}' '${branch}' '${env.WORKSPACE}'"
                    sh 'terraform init'
                    sh 'terraform apply'
                }
            }
     }

     stage('run cucumber testsuite and update status on github') {
            steps {
               sh "${run_cucumber_with_gitarro}"
               sh "scp ${ssh_flags} root@${ctl_node}:/root/spacewalk/testsuite/output.html ${env.WORKSPACE}"
               sh "scp ${ssh_flags} -rp root@$ctl_node:/root/spacewalk/testsuite/results_junit ${env.WORKSPACE}"
            }
        }
   }
   post {
        always {
            dir('prod/cucumber-on-prs/sumaform') {
                sh 'terraform destroy -force'

            }
            // Always restore the pr-automation obs branch to head status. (keep pkg up2date)
            // we check at the begin of the pipeline on the status of the obs branch
            sh "${scripts}/restore_obs_upstream.sh ${obs_from_github} ${branch}"     
            sh "mv output.html ${branch}${env.BUILD_NUMBER}.html"
            archiveArtifacts artifacts: "${branch}${env.BUILD_NUMBER}.html"
            junit "results_junit/*.xml"
            dir("${env.WORKSPACE}") {
                deleteDir()
            }
        }
    }
}
